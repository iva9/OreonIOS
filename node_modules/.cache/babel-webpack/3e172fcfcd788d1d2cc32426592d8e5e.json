{"ast":null,"code":"import { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport { map, scan, filter, observeOn } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport 'firebase/firestore';\nimport firebase from 'firebase/app';\n/**\n * @fileoverview added by tsickle\n * Generated from: observable/fromRef.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T, R\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n  return new Observable(\n  /**\n  * @param {?} subscriber\n  * @return {?}\n  */\n  subscriber => {\n    /** @type {?} */\n    let unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(\n      /**\n      * @return {?}\n      */\n      () => {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return (\n      /**\n      * @return {?}\n      */\n      () => {\n        if (unsubscribe != null) {\n          unsubscribe();\n        }\n      }\n    );\n  });\n}\n/**\n * @template R\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\n/**\n * @template T\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(\n  /**\n  * @param {?} payload\n  * @return {?}\n  */\n  payload => ({\n    payload,\n    type: 'value'\n  })));\n}\n/**\n * @template T\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(\n  /**\n  * @param {?} payload\n  * @return {?}\n  */\n  payload => ({\n    payload,\n    type: 'query'\n  })));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: collection/changes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @template T\n * @param {?} query\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(map(\n  /**\n  * @param {?} action\n  * @return {?}\n  */\n  action => action.payload.docChanges().map(\n  /**\n  * @param {?} change\n  * @return {?}\n  */\n  change => (\n  /** @type {?} */\n  {\n    type: change.type,\n    payload: change\n  }))));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @template T\n * @param {?} query\n * @param {?} events\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction sortedChanges(query, events, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(map(\n  /**\n  * @param {?} changes\n  * @return {?}\n  */\n  changes => changes.payload.docChanges()), scan(\n  /**\n  * @param {?} current\n  * @param {?} changes\n  * @return {?}\n  */\n  (current, changes) => combineChanges(current, changes, events), []), map(\n  /**\n  * @param {?} changes\n  * @return {?}\n  */\n  changes => changes.map(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  c => (\n  /** @type {?} */\n  {\n    type: c.type,\n    payload: c\n  }))));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @template T\n * @param {?} current\n * @param {?} changes\n * @param {?} events\n * @return {?}\n */\n\n\nfunction combineChanges(current, changes, events) {\n  changes.forEach(\n  /**\n  * @param {?} change\n  * @return {?}\n  */\n  change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Creates a new sorted array from a new change.\n * @template T\n * @param {?} combined\n * @param {?} change\n * @return {?}\n */\n\n\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {// Not sure why the duplicates are getting fired\n      } else {\n        combined.splice(change.newIndex, 0, change);\n      }\n\n      break;\n\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          combined.splice(change.oldIndex, 1);\n          combined.splice(change.newIndex, 0, change);\n        } else {\n          combined.splice(change.newIndex, 1, change);\n        }\n      }\n\n      break;\n\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        combined.splice(change.oldIndex, 1);\n      }\n\n      break;\n  }\n\n  return combined;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: collection/collection.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?=} events\n * @return {?}\n */\n\n\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n\n  return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n * @template T\n */\n\n\nclass AngularFirestoreCollection {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   * @param {?} ref\n   * @param {?} query\n   * @param {?} afs\n   */\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n    }\n\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(\n    /**\n    * @param {?} actions\n    * @return {?}\n    */\n    actions => actions.filter(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => events.indexOf(change.type) > -1)), filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes.length > 0), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan(\n    /**\n    * @param {?} current\n    * @param {?} action\n    * @return {?}\n    */\n    (current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  snapshotChanges(events) {\n    /** @type {?} */\n    const validatedEvents = validateEventsArray(events);\n    /** @type {?} */\n\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * @template K\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(\n    /**\n    * @param {?} actions\n    * @return {?}\n    */\n    actions => actions.payload.docs.map(\n    /**\n    * @param {?} a\n    * @return {?}\n    */\n    a => {\n      if (options.idField) {\n        return (\n          /** @type {?} */\n          Object.assign(Object.assign({},\n          /** @type {?} */\n          a.data()), {\n            [options.idField]: a.id\n          })\n        );\n      } else {\n        return a.data();\n      }\n    })), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  add(data) {\n    return this.ref.add(data);\n  }\n  /**\n   * Create a reference to a single document in a collection.\n   * @template T\n   * @param {?=} path\n   * @return {?}\n   */\n\n\n  doc(path) {\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  AngularFirestoreCollection.prototype.ref;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFirestoreCollection.prototype.query;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFirestoreCollection.prototype.afs;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: document/document.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n * @template T\n */\n\n\nclass AngularFirestoreDocument {\n  /**\n   * The contstuctor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   * @param {?} ref\n   * @param {?} afs\n   */\n  constructor(ref, afs) {\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\n   * Create or overwrite a single document.\n   * @param {?} data\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  set(data, options) {\n    return this.ref.set(data, options);\n  }\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  update(data) {\n    return this.ref.update(data);\n  }\n  /**\n   * Delete a document.\n   * @return {?}\n   */\n\n\n  delete() {\n    return this.ref.delete();\n  }\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   * @template R\n   * @param {?} path\n   * @param {?=} queryFn\n   * @return {?}\n   */\n\n\n  collection(path, queryFn) {\n    /** @type {?} */\n    const collectionRef = this.ref.collection(path);\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n  /**\n   * Listen to snapshot updates from the document.\n   * @return {?}\n   */\n\n\n  snapshotChanges() {\n    /** @type {?} */\n    const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Listen to unwrapped snapshot updates from the document.\n   * @return {?}\n   */\n\n\n  valueChanges() {\n    return this.snapshotChanges().pipe(map(\n    /**\n    * @param {?} action\n    * @return {?}\n    */\n    action => {\n      return action.payload.data();\n    }));\n  }\n  /**\n   * Retrieve the document once.\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  get(options) {\n    return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  AngularFirestoreDocument.prototype.ref;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFirestoreDocument.prototype.afs;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: collection-group/collection-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n * @template T\n */\n\n\nclass AngularFirestoreCollectionGroup {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   * @param {?} query\n   * @param {?} afs\n   */\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n    }\n\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(\n    /**\n    * @param {?} actions\n    * @return {?}\n    */\n    actions => actions.filter(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => events.indexOf(change.type) > -1)), filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => changes.length > 0), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan(\n    /**\n    * @param {?} current\n    * @param {?} action\n    * @return {?}\n    */\n    (current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   * @param {?=} events\n   * @return {?}\n   */\n\n\n  snapshotChanges(events) {\n    /** @type {?} */\n    const validatedEvents = validateEventsArray(events);\n    /** @type {?} */\n\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   * @return {?}\n   */\n\n\n  valueChanges() {\n    /** @type {?} */\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(map(\n    /**\n    * @param {?} actions\n    * @return {?}\n    */\n    actions => actions.payload.docs.map(\n    /**\n    * @param {?} a\n    * @return {?}\n    */\n    a => a.data())), this.afs.keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  AngularFirestoreCollectionGroup.prototype.query;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFirestoreCollectionGroup.prototype.afs;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: firestore.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst atFirestore = /*#__PURE__*/require('@firebase/firestore');\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n * @type {?}\n */\n\n\nconst ENABLE_PERSISTENCE = /*#__PURE__*/new InjectionToken('angularfire2.enableFirestorePersistence');\n/** @type {?} */\n\nconst PERSISTENCE_SETTINGS = /*#__PURE__*/new InjectionToken('angularfire2.firestore.persistenceSettings');\n/** @type {?} */\n\nconst SETTINGS = /*#__PURE__*/new InjectionToken('angularfire2.firestore.settings');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param {?} collectionRef - A collection reference to query\n * @param {?=} queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n * @return {?}\n */\n\nfunction associateQuery(collectionRef, queryFn =\n/**\n* @param {?} ref\n* @return {?}\n*/\nref => ref) {\n  /** @type {?} */\n  const query = queryFn(collectionRef);\n  /** @type {?} */\n\n  const ref = collectionRef;\n  return {\n    query,\n    ref\n  };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '\\@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '\\@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * \\@Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n\n\nlet AngularFirestore = /*#__PURE__*/(() => {\n  class AngularFirestore {\n    /**\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\n     * don't rely on the main Firebase App instance and we can create named\n     * apps and use multiple apps.\n     * @param {?} options\n     * @param {?} nameOrConfig\n     * @param {?} shouldEnablePersistence\n     * @param {?} settings\n     * @param {?} platformId\n     * @param {?} zone\n     * @param {?} persistenceSettings\n     */\n    constructor(options, nameOrConfig, shouldEnablePersistence, settings, // tslint:disable-next-line:ban-types\n    platformId, zone, persistenceSettings) {\n      this.schedulers = new ɵAngularFireSchedulers(zone);\n      this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n      this.firestore = zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const app = ɵfirebaseAppFactory(options, zone, nameOrConfig); // INVESTIGATE this seems to be required because in the browser build registerFirestore is an Object?\n        //             seems like we're fighting ngcc. In the server firestore() isn't available, so I have to register\n        //             in the browser registerFirestore is not a function... maybe this is an underlying firebase-js-sdk issue\n\n        if ('registerFirestore' in atFirestore) {\n          /** @type {?} */\n          atFirestore.registerFirestore(\n          /** @type {?} */\n          firebase);\n        }\n        /** @type {?} */\n\n\n        const firestore = app.firestore();\n\n        if (settings) {\n          firestore.settings(settings);\n        }\n\n        return firestore;\n      });\n\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n\n        /** @type {?} */\n        const enablePersistence =\n        /**\n        * @return {?}\n        */\n        () => {\n          try {\n            return from(this.firestore.enablePersistence(persistenceSettings || undefined).then(\n            /**\n            * @return {?}\n            */\n            () => true,\n            /**\n            * @return {?}\n            */\n            () => false));\n          } catch (e) {\n            return of(false);\n          }\n        };\n\n        this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\n      } else {\n        this.persistenceEnabled$ = of(false);\n      }\n    }\n    /**\n     * @template T\n     * @param {?} pathOrRef\n     * @param {?=} queryFn\n     * @return {?}\n     */\n\n\n    collection(pathOrRef, queryFn) {\n      /** @type {?} */\n      let collectionRef;\n\n      if (typeof pathOrRef === 'string') {\n        collectionRef = this.firestore.collection(pathOrRef);\n      } else {\n        collectionRef = pathOrRef;\n      }\n\n      const {\n        ref,\n        query\n      } = associateQuery(collectionRef, queryFn);\n      /** @type {?} */\n\n      const refInZone = this.schedulers.ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => ref);\n      return new AngularFirestoreCollection(refInZone, query, this);\n    }\n    /**\n     * Create a reference to a Firestore Collection Group based on a collectionId\n     * and an optional query function to narrow the result\n     * set.\n     * @template T\n     * @param {?} collectionId\n     * @param {?=} queryGroupFn\n     * @return {?}\n     */\n\n\n    collectionGroup(collectionId, queryGroupFn) {\n      /** @type {?} */\n      const queryFn = queryGroupFn || (\n      /**\n      * @param {?} ref\n      * @return {?}\n      */\n      ref => ref);\n      /** @type {?} */\n\n\n      const collectionGroup = this.firestore.collectionGroup(collectionId);\n      return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n    }\n    /**\n     * @template T\n     * @param {?} pathOrRef\n     * @return {?}\n     */\n\n\n    doc(pathOrRef) {\n      /** @type {?} */\n      let ref;\n\n      if (typeof pathOrRef === 'string') {\n        ref = this.firestore.doc(pathOrRef);\n      } else {\n        ref = pathOrRef;\n      }\n      /** @type {?} */\n\n\n      const refInZone = this.schedulers.ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => ref);\n      return new AngularFirestoreDocument(refInZone, this);\n    }\n    /**\n     * Returns a generated Firestore Document Id.\n     * @return {?}\n     */\n\n\n    createId() {\n      return this.firestore.collection('_').doc().id;\n    }\n\n  }\n\n  AngularFirestore.ɵfac = function AngularFirestore_Factory(t) {\n    return new (t || AngularFirestore)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(ENABLE_PERSISTENCE, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PERSISTENCE_SETTINGS, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  AngularFirestore.ɵprov = ɵɵdefineInjectable({\n    factory: function AngularFirestore_Factory() {\n      return new AngularFirestore(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(ENABLE_PERSISTENCE, 8), ɵɵinject(SETTINGS, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone), ɵɵinject(PERSISTENCE_SETTINGS, 8));\n    },\n    token: AngularFirestore,\n    providedIn: \"any\"\n  });\n  return AngularFirestore;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  AngularFirestore.prototype.firestore;\n  /** @type {?} */\n\n  AngularFirestore.prototype.persistenceEnabled$;\n  /** @type {?} */\n\n  AngularFirestore.prototype.schedulers;\n  /** @type {?} */\n\n  AngularFirestore.prototype.keepUnstableUntilFirst;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: firestore.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet AngularFirestoreModule = /*#__PURE__*/(() => {\n  class AngularFirestoreModule {\n    /**\n     * Attempt to enable persistent storage, if possible\n     * @param {?=} persistenceSettings\n     * @return {?}\n     */\n    static enablePersistence(persistenceSettings) {\n      return {\n        ngModule: AngularFirestoreModule,\n        providers: [{\n          provide: ENABLE_PERSISTENCE,\n          useValue: true\n        }, {\n          provide: PERSISTENCE_SETTINGS,\n          useValue: persistenceSettings\n        }]\n      };\n    }\n\n  }\n\n  AngularFirestoreModule.ɵfac = function AngularFirestoreModule_Factory(t) {\n    return new (t || AngularFirestoreModule)();\n  };\n\n  AngularFirestoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AngularFirestoreModule\n  });\n  AngularFirestoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [AngularFirestore]\n  });\n  return AngularFirestoreModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: interfaces.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T\n */\n\n\nfunction DocumentSnapshotExists() {}\n\nif (false) {\n  /** @type {?} */\n  DocumentSnapshotExists.prototype.exists;\n  /**\n   * @param {?=} options\n   * @return {?}\n   */\n\n  DocumentSnapshotExists.prototype.data = function (options) {};\n}\n/**\n * @record\n */\n\n\nfunction DocumentSnapshotDoesNotExist() {}\n\nif (false) {\n  /** @type {?} */\n  DocumentSnapshotDoesNotExist.prototype.exists;\n  /**\n   * @param {?=} options\n   * @return {?}\n   */\n\n  DocumentSnapshotDoesNotExist.prototype.data = function (options) {};\n  /**\n   * @param {?} fieldPath\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  DocumentSnapshotDoesNotExist.prototype.get = function (fieldPath, options) {};\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction QueryDocumentSnapshot() {}\n\nif (false) {\n  /**\n   * @param {?=} options\n   * @return {?}\n   */\n  QueryDocumentSnapshot.prototype.data = function (options) {};\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction QuerySnapshot() {}\n\nif (false) {\n  /** @type {?} */\n  QuerySnapshot.prototype.docs;\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction DocumentChange() {}\n\nif (false) {\n  /** @type {?} */\n  DocumentChange.prototype.doc;\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction DocumentChangeAction() {}\n\nif (false) {\n  /** @type {?} */\n  DocumentChangeAction.prototype.type;\n  /** @type {?} */\n\n  DocumentChangeAction.prototype.payload;\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction Action() {}\n\nif (false) {\n  /** @type {?} */\n  Action.prototype.type;\n  /** @type {?} */\n\n  Action.prototype.payload;\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction Reference() {}\n\nif (false) {\n  /** @type {?} */\n  Reference.prototype.onSnapshot;\n}\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n * @record\n */\n\n\nfunction AssociatedReference() {}\n\nif (false) {\n  /** @type {?} */\n  AssociatedReference.prototype.ref;\n  /** @type {?} */\n\n  AssociatedReference.prototype.query;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-fire-firestore.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray }; //# sourceMappingURL=angular-fire-firestore.js.map","map":null,"metadata":{},"sourceType":"module"}