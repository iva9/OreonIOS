{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport * as moment from 'moment';\nimport firebase from 'firebase/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/database\";\nimport * as i4 from \"@angular/fire/auth\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(auth, firestore, router, firebase) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.router = router;\n      this.firebase = firebase;\n      this.y = new Array();\n      this.w = new Array();\n      this.y2 = new Array();\n      this.w2 = new Array();\n      this.hjdia = new Date().toISOString();\n    } //private editar : EditarModalPage) { }\n\n\n    setUser(user) {\n      this.user = user;\n    }\n\n    getUID() {\n      return this.user.uid;\n    }\n\n    updateProfile(url, nome) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var username = nome;\n        const res = yield this.auth.currentUser;\n        var iduser = res.uid;\n        res.updateProfile({\n          photoURL: url,\n          displayName: nome\n        });\n        this.firestore.collection(`users`).doc(`${res.uid}`).update({\n          imgUser: url,\n          username: nome\n        });\n        this.firebase.database.ref(`users/${res.uid}/img`).set(url);\n        this.firebase.database.ref(`users/${res.uid}/username`).set({\n          username,\n          iduser\n        });\n      });\n    }\n\n    updateNome(nome) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var username = nome;\n        const res = yield this.auth.currentUser;\n        var iduser = res.uid;\n        res.updateProfile({\n          displayName: nome\n        });\n        this.firestore.collection(`users`).doc(`${res.uid}`).update({\n          username: nome\n        });\n        this.firebase.database.ref(`users/${res.uid}/username`).set({\n          username,\n          iduser\n        });\n      });\n    }\n\n    updateImage(url) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield this.auth.currentUser;\n        var iduser = res.uid;\n        res.updateProfile({\n          photoURL: url\n        });\n        this.firestore.collection(`users`).doc(`${res.uid}`).update({\n          imgUser: url\n        });\n        this.firebase.database.ref(`users/${res.uid}/img`).set(url);\n      });\n    }\n\n    login(email, password) {\n      return this.auth.signInWithEmailAndPassword(email, password);\n    }\n\n    logout() {\n      return this.auth.signOut();\n    }\n\n    denuncia(denunciado) {\n      this.firestore.collection('users').doc(`${denunciado}`).update({\n        Denuncias: firebase.firestore.FieldValue.increment(1)\n      });\n    }\n\n    todasdenuncias(denunciadissimo) {\n      this.firestore.collection(`Denuncias`).doc(`${denunciadissimo.id}`).set(denunciadissimo);\n    }\n\n    ordenar(escolha, up) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(up);\n\n        if (up == false) {\n          console.log(\"TA MUDANDO\");\n          this.firestore.collection(`users`).doc(`${escolha}`).update({\n            UP: true\n          });\n        }\n\n        if (up == true) {\n          console.log(\"TA MUDANDO\");\n          this.firestore.collection(`users`).doc(`${escolha}`).update({\n            UP: false\n          });\n        }\n      });\n    }\n\n    getauth() {\n      return this.auth;\n    }\n\n    listadecriados(cria) {\n      console.log(cria);\n      this.eventocriado = this.firestore.collection('eventos', ref => ref.where('userID', 'array-contains', `${cria}`).orderBy(\"UPnum\", \"desc\").limit(10));\n      this.eventocriado.get().subscribe(criados => {\n        criados.forEach(evc => {\n          const data = evc.data();\n          const id = evc.id;\n\n          if (data.fim < this.hjdia) {\n            //  console.log(data.fim, \" menor que \", this.hjdia) // checar se data do  evento esta no futuro\n            this.passadostate = this.firestore.doc(`eventos/${id}`);\n            this.passadostate.update({\n              passado: true\n            });\n          }\n\n          moment.locale('pt-BR');\n          this.m = moment(data.dia).format('ddd DD MMM - HH:mm');\n          data.dia = this.m;\n          this.provCria1 = Object.assign({\n            id\n          }, data);\n          this.w.push(this.provCria1);\n          this.nextQueryCriados = evc;\n        });\n      });\n    }\n\n    listadecriados2(cria2) {\n      const lastC = this.nextQueryCriados;\n      this.eventocriado2 = this.firestore.collection('eventos', ref => ref.where('userID', 'array-contains', `${cria2}`).orderBy(\"UPnum\", \"desc\").startAfter(lastC).limit(3));\n      return this.eventocriado2.get().subscribe(criados => {\n        criados.forEach(c => {\n          const data = c.data();\n          const id = c.id;\n\n          if (data.fim < this.hjdia) {\n            //console.log(data.fim, \" menor que \", this.hjdia) // checar se data do  evento esta no futuro\n            this.passadostate = this.firestore.doc(`eventos/${id}`);\n            this.passadostate.update({\n              passado: true\n            });\n          }\n\n          moment.locale('pt-BR');\n          this.m = moment(data.dia).format('ddd DD MMM - HH:mm');\n          data.dia = this.m;\n          this.provCria2 = Object.assign({\n            id\n          }, data);\n          this.w2.push(this.provCria2);\n          this.nextQueryCriados = c;\n        });\n      });\n    }\n\n    listadeup(up_us) {\n      this.eventoup = this.firestore.collection('eventos', ref => ref.where('up', 'array-contains', `${up_us}`).orderBy(\"UPnum\", \"desc\").limit(25));\n      return this.eventoup.get().subscribe(upados => {\n        upados.forEach(up => {\n          const data = up.data();\n          const id = up.id;\n\n          if (data.fim < this.hjdia) {\n            // checar se data do  evento esta no futuro\n            this.passadostate = this.firestore.doc(`eventos/${id}`);\n            this.passadostate.update({\n              passado: true\n            });\n          }\n\n          moment.locale('pt-BR');\n          this.m = moment(data.dia).format('ddd DD MMM - HH:mm');\n          data.dia = this.m;\n          this.provUp1 = Object.assign({\n            id\n          }, data);\n          this.y.push(this.provUp1);\n          this.nextQueryUp = up;\n        });\n      });\n    }\n\n    listadeup2(user) {\n      const last = this.nextQueryUp;\n      console.log(last);\n      this.eventoup2 = this.firestore.collection('eventos', ref => ref.where('up', 'array-contains', `${user}`).orderBy(\"UPnum\", \"desc\").startAfter(last).limit(25));\n      return this.eventoup2.get().subscribe(upei => {\n        upei.forEach(upi => {\n          const data = upi.data();\n          const id = upi.id;\n\n          if (data.fim < this.hjdia) {\n            console.log(data.fim, \" menor que \", this.hjdia); // checar se data do  evento esta no futuro\n\n            this.passadostate = this.firestore.doc(`eventos/${id}`);\n            this.passadostate.update({\n              passado: true\n            });\n          }\n\n          moment.locale('pt-BR');\n          this.m = moment(data.dia).format('ddd DD MMM - HH:mm');\n          data.dia = this.m;\n          this.provUp2 = Object.assign({\n            id\n          }, data);\n          this.y2.push(this.provUp2);\n          this.nextQueryUp = upi;\n        });\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(AngularFireAuth), i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AngularFireDatabase));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}