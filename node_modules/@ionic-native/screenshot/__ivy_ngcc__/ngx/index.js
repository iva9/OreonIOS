import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, Plugin, getPromise } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Screenshot = /** @class */ (function (_super) {
    __extends(Screenshot, _super);
    function Screenshot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  Takes screenshot and saves the image
     *
     * @param format {string} Format can take the value of either 'jpg' or 'png'
     * On ios, only 'jpg' format is supported
     * @param quality {number}  Determines the quality of the screenshot.
     *        Default quality is set to 100.
     * @param filename {string} Name of the file as stored on the storage
     * @returns {Promise<any>}
     */
    Screenshot.prototype.save = function (format, quality, filename) {
        return getPromise(function (resolve, reject) {
            navigator.screenshot.save(function (error, result) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            }, format, quality, filename);
        });
    };
    /**
     *  Takes screenshot and returns the image as an URI
     *
     * @param quality {number} Determines the quality of the screenshot.
     *        Default quality is set to 100.
     * @returns {Promise<any>}
     */
    Screenshot.prototype.URI = function (quality) {
        return getPromise(function (resolve, reject) {
            navigator.screenshot.URI(function (error, result) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            }, quality);
        });
    };
    Screenshot.pluginName = "Screenshot";
    Screenshot.plugin = "com.darktalker.cordova.screenshot";
    Screenshot.pluginRef = "navigator.screenshot";
    Screenshot.repo = "https://github.com/gitawego/cordova-screenshot";
    Screenshot.platforms = ["Android", "iOS", "macOS"];
Screenshot.ɵfac = /*@__PURE__*/ function () { var ɵScreenshot_BaseFactory; return function Screenshot_Factory(t) { return (ɵScreenshot_BaseFactory || (ɵScreenshot_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Screenshot)))(t || Screenshot); }; }();
Screenshot.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Screenshot, factory: function (t) { return Screenshot.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Screenshot, [{
        type: Injectable
    }], null, null); })();
    return Screenshot;
}(IonicNativePlugin));
export { Screenshot };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvc2NyZWVuc2hvdC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDM0U7QUFJZ0IsSUF5QmdCLDhCQUFpQjtBQUFDO0FBRTlCO0FBRXlCO0FBQU0sSUFIakQ7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FETDtBQUNMLElBQUUseUJBQUksR0FBSixVQUFLLE1BQWUsRUFBRSxPQUFnQixFQUFFLFFBQWlCO0FBQUksUUFDM0QsT0FBTyxVQUFVLENBQU0sVUFBQyxPQUFPLEVBQUUsTUFBTTtBQUFJLFlBQ3pDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN2QixVQUFDLEtBQVUsRUFBRSxNQUFXO0FBQUksZ0JBQzFCLElBQUksS0FBSyxFQUFFO0FBQ3JCLG9CQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixpQkFBVztBQUFDLHFCQUFLO0FBQ2pCLG9CQUFZLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixpQkFBVztBQUNYLFlBQVEsQ0FBQyxFQUNELE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxDQUNULENBQUM7QUFDUixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURDO0FBQ0wsSUFBRSx3QkFBRyxHQUFILFVBQUksT0FBZ0I7QUFBSSxRQUN0QixPQUFPLFVBQVUsQ0FBTSxVQUFDLE9BQU8sRUFBRSxNQUFNO0FBQUksWUFDekMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFVLEVBQUUsTUFBVztBQUFJLGdCQUNuRCxJQUFJLEtBQUssRUFBRTtBQUNuQixvQkFBVSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEIsaUJBQVM7QUFBQyxxQkFBSztBQUNmLG9CQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxQixpQkFBUztBQUNULFlBQU0sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2xCLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDRjtBQUN3QztBQUE2RDtBQUFtRDtBQUF3RTs4Q0FoRGhPLFVBQVU7Ozs7MEJBQ0w7QUFBQyxxQkEvQlA7QUFBRSxFQStCOEIsaUJBQWlCO0FBQ2hELFNBRFksVUFBVTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiwgZ2V0UHJvbWlzZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmRlY2xhcmUgY29uc3QgbmF2aWdhdG9yOiBhbnk7XG5cbi8qKlxuICogQG5hbWUgU2NyZWVuc2hvdFxuICogQGRlc2NyaXB0aW9uIENhcHR1cmVzIGEgc2NyZWVuIHNob3RcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU2NyZWVuc2hvdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2NyZWVuc2hvdC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NyZWVuc2hvdDogU2NyZWVuc2hvdCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gVGFrZSBhIHNjcmVlbnNob3QgYW5kIHNhdmUgdG8gZmlsZVxuICogdGhpcy5zY3JlZW5zaG90LnNhdmUoJ2pwZycsIDgwLCAnbXlzY3JlZW5zaG90LmpwZycpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqXG4gKiAvLyBUYWtlIGEgc2NyZWVuc2hvdCBhbmQgZ2V0IHRlbXBvcmFyeSBmaWxlIFVSSVxuICogdGhpcy5zY3JlZW5zaG90LlVSSSg4MCkudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2NyZWVuc2hvdCcsXG4gIHBsdWdpbjogJ2NvbS5kYXJrdGFsa2VyLmNvcmRvdmEuc2NyZWVuc2hvdCcsXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5zY3JlZW5zaG90JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRhd2Vnby9jb3Jkb3ZhLXNjcmVlbnNob3QnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnbWFjT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2NyZWVuc2hvdCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqICBUYWtlcyBzY3JlZW5zaG90IGFuZCBzYXZlcyB0aGUgaW1hZ2VcbiAgICpcbiAgICogQHBhcmFtIGZvcm1hdCB7c3RyaW5nfSBGb3JtYXQgY2FuIHRha2UgdGhlIHZhbHVlIG9mIGVpdGhlciAnanBnJyBvciAncG5nJ1xuICAgKiBPbiBpb3MsIG9ubHkgJ2pwZycgZm9ybWF0IGlzIHN1cHBvcnRlZFxuICAgKiBAcGFyYW0gcXVhbGl0eSB7bnVtYmVyfSAgRGV0ZXJtaW5lcyB0aGUgcXVhbGl0eSBvZiB0aGUgc2NyZWVuc2hvdC5cbiAgICogICAgICAgIERlZmF1bHQgcXVhbGl0eSBpcyBzZXQgdG8gMTAwLlxuICAgKiBAcGFyYW0gZmlsZW5hbWUge3N0cmluZ30gTmFtZSBvZiB0aGUgZmlsZSBhcyBzdG9yZWQgb24gdGhlIHN0b3JhZ2VcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIHNhdmUoZm9ybWF0Pzogc3RyaW5nLCBxdWFsaXR5PzogbnVtYmVyLCBmaWxlbmFtZT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGdldFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBuYXZpZ2F0b3Iuc2NyZWVuc2hvdC5zYXZlKFxuICAgICAgICAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdCxcbiAgICAgICAgcXVhbGl0eSxcbiAgICAgICAgZmlsZW5hbWVcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogIFRha2VzIHNjcmVlbnNob3QgYW5kIHJldHVybnMgdGhlIGltYWdlIGFzIGFuIFVSSVxuICAgKlxuICAgKiBAcGFyYW0gcXVhbGl0eSB7bnVtYmVyfSBEZXRlcm1pbmVzIHRoZSBxdWFsaXR5IG9mIHRoZSBzY3JlZW5zaG90LlxuICAgKiAgICAgICAgRGVmYXVsdCBxdWFsaXR5IGlzIHNldCB0byAxMDAuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBVUkkocXVhbGl0eT86IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGdldFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBuYXZpZ2F0b3Iuc2NyZWVuc2hvdC5VUkkoKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9LCBxdWFsaXR5KTtcbiAgICB9KTtcbiAgfVxufVxuIl19