{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AAOA;AAEA;;AAEA;AACA;AAAA;;AAAA;;AACI,iEAAgB,IAAhB,EAAgBA,OAAhB;AACJ,2BAAqB,uDAAW,IAAX,EAAW,WAAX,EAAW,CAAX,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AAAA;;AACA;AACA;AACAC,uFAFA;AAGAC,qBAHA;AAIAC;AAJA;AAMA,WAPA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA,6BAA8CC,SAA9C;AAAA,gBAAcC,YAAd,cAAcA,YAAd;AAAA,gBAAcC,eAAd,cAAcA,eAAd;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,WAfA;AAgBA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,gBAAcC,EAAd,GAAmB,KAAnB,CAAcA,EAAd;AACA;AACA;;AACA;AACQ,uEAAG;AACX;AACAC;AACAC;AACA;;AACA;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;;;AACA;AACY;AACZ;;AACAA;AACAC;AACAF;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACc;AACd;AACA;AACW,iBAjBX,EAiBW,GAjBX;AAkBS,eA/CD;AAgDR,aAjDA;AAkDA;AACA;AACA;AACA;;;AACM,qEAAG;AACTF;;AACA;AACAA;AACA,eAFA;AAGO,aALD;AAMN,WAhEA;AAiEA;;AA/HA;AAAA;AAAA,iBAgIA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAcK,KAAd,GAA6B,IAA7B,CAAcA,KAAd;AAAA,kBAAcC,KAAd,GAA6B,IAA7B,CAAcA,KAAd;AACA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnJA;AAAA;AAAA,iBAoJA;AAAA;;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,gCAA0B,yDAAc,SAAd,EAAcC,aAAd,YAA0CC,iBAA1C,EAA1B;AACAC;;AACA;;AACA;;AACA;;AACA;AACA,eAXA,MAYA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,aAtBA;;AAuBA;AAAgDC;AAAhD,eAAiEC,OAAjE,CAAiE,OAAjE;AACA;;AACA;AACAC;AAAA;AAAA;AACA;AACA;AAjLA;AAAA;AAAA,iBAkLA;AACA;;AACA;AACA;AACA;AACA;AAvLA;AAAA;AAAA,eAwLA;AACA,mBAAW,yDAAc,OAAd,EAAcL,aAAd,qCAAkE,UAAlE,SAAX;AACA;AA1LA;AAAA;AAAA,iBA2LA;AAAA;AAAA;;AACA,gBAAYF,KAAZ,GAAmD,IAAnD,CAAYA,KAAZ;AAAA,gBAAYQ,KAAZ,GAAmD,IAAnD,CAAYA,KAAZ;AAAA,gBAAYC,QAAZ,GAAmD,IAAnD,CAAYA,QAAZ;AAAA,gBAAYC,YAAZ,GAAmD,IAAnD,CAAYA,YAAZ;AACA,uBAAiB,8DAAU,IAAV,CAAjB;AACA,mBAAY,uDAAEC,iDAAF,EAAM;AAAIC,yBAAJ;AAAI,uBAAoB,uDAAkBJ,KAAlB,oCAC1CK,IAD0C,EAC1C,IAD0C,yBAE1C,sBAF0C,EAE1CJ,QAF0C,yBAG1C,6BAH0C,EAG1CC,YAH0C;AAAxB,aAAN,EAIA,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CAJA,EAIgE,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CAJhE,EAIgI,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CAJhI,EAImLV;AAC/L,qBAAc,uDAAC,KAAD,EAAC;AAAU,sCAAV;AAAU,wCAAV;AAAU,mCAAV;AAAUc;AACzB;AACA;AAFe,eAAD,EAEHC,SAFG,CAAd;AAGK,aAJ0L,CAJnL,EAQJ,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CARI,EAQ4D,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CAR5D,EAQ4H,uDAAC,KAAD,EAAC;AAAU;AAAV,aAAD,EAAmD,MAAnD,CAR5H,CAAZ;AASA;AAvMA;AAAA;AAAA,eAwMA;AAAa,mBAAO,uDAAU,IAAV,CAAP;AAAiB;AAxM9B;AAAA;AAAA,eAyMA;AAA0B;AAC1B;AAD0B;AAE1B;AA3MA;;AAAA;AAAA;;AA6MA;AACAC;AACAC,uCADA;AAEAC;AAFA;;;","names":["hostRef","top","left","behavior","ev","useInputMode","inputModeColumn","el","clearTimeout","timeout","activeEl","activeElement","items","value","querySelector","PICKER_COL_ACTIVE","oldActive","threshold","observe","parentEl","color","isActive","numericInput","_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__","tabindex","mode","onClick","item","PickerColumnInternal","ios","md"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-06cd27b1.js';\nimport { b as getIonMode } from './ionic-global-a049bcbf.js';\nimport { r as raf, g as getElementRoot } from './helpers-eed79a2b.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-9a9aa7ec.js';\nimport { c as createColorClasses } from './theme-a24ff1ad.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nlet PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.hapticsStarted = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      this.el.scroll({\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        top: target.offsetTop - (3 * target.clientHeight) + (target.clientHeight / 2),\n        left: 0,\n        behavior: smooth ? 'smooth' : undefined\n      });\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.isActive = false;\n        return;\n      }\n      this.isActive = true;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.hapticsStarted) {\n            hapticSelectionStart();\n            this.hapticsStarted = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + (bbox.width / 2);\n          const centerY = bbox.y + (bbox.height / 2);\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.value = selectedItem.value;\n              hapticSelectionEnd();\n              this.hapticsStarted = false;\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view and emit the value\n       * change, when the picker column is actively visible to the user.\n       */\n      const { items, value } = this;\n      this.scrollActiveItemIntoView();\n      const findItem = items.find(item => item.value === value);\n      if (findItem) {\n        this.ionChange.emit(findItem);\n      }\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n        this.isColumnVisible = true;\n      }\n      else {\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n        this.isColumnVisible = false;\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.01 }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"div\", { class: \"picker-item\", \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target);\n        } }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n"]}